apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: "idea"
apply plugin: 'maven'


version = '0.0.1'
ext {
		appName = 'tonegodgui-test'
                brainless_studios = 'com.github.brainless-studios'
                jme_group = 'com.github.jMonkeyEngine.jmonkeyengine'
                jmonkeyengine_version = 'c5c893f' // 3.1-alpha1
                tonegodgui_version = '22fe3d5' // 3.1-alpha1
}
	sourceCompatibility = 1.7

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://jitpack.io" }
	}


mainClassName = 'tonegod.gui.tests.Main'
if (!hasProperty('mainClass')) {
	ext.mainClass = 'tonegod.gui.tests.Main'
}

dependencies {
	compile fileTree(dir: 'lib', include: ['*.jar'])

	compile "${jme_group}:jme3-desktop:${jmonkeyengine_version}"
        compile "${jme_group}:jme3-core:${jmonkeyengine_version}"
        compile "${jme_group}:jme3-lwjgl:${jmonkeyengine_version}"
        compile "${jme_group}:jme3-plugins:${jmonkeyengine_version}"
	compile "${brainless_studios}:tonegodgui:${tonegodgui_version}"
//	compile project(':tonegodgui')
}

eclipse.classpath.file {
	beforeMerged { classpath ->
		classpath.entries.removeAll() { c ->
			c.kind == 'src'
		}
	}

	withXml {
		def node = it.asNode()

//		node.appendNode('classpathentry kind="src" path="src"')

		node.children().removeAll() { c ->
			def path = c.attribute('path')
			path != null && (
					path.contains('/com.android.support/support-v4')
					)
		}
	}
	
}

sourceSets {
	main {
		java { srcDir 'src'}
		resources { srcDir 'assets' }
	}
}


//sets up the Android Eclipse project, using the old Ant based build.
eclipse {
	// need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
	// ignores any nodes added in classpath.file.withXml
//	sourceSets {
//		main { 
//			java.srcDirs "src"
//			resources.srcDirs = ["src"]
//		}
//	}
	classpath {
		downloadSources=true
	 }

	jdt {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	project {
		name = appName 
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
	archives sourcesJar
	//, javadocJar
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}



