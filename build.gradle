buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
	}
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: "idea"
//apply plugin: 'pmd'
//apply plugin: 'findbugs'
//apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'


version = '0.0.1'
ext {
		appName = 'tonegodgui-test'
		jmonkeyengine_version = '3.0.10'
}
	sourceCompatibility = 1.8

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url 'http://updates.jmonkeyengine.org/maven' }		
		maven { url "https://jitpack.io" }
	}
	
//	pmd {
//		ignoreFailures = true
//	}
//	
//	findbugs {
//		ignoreFailures = true
//	}


mainClassName = 'app.MainRTS'
if (!hasProperty('mainClass')) {
	ext.mainClass = 'app.MainRTS'
}

dependencies {
	compile fileTree(dir: 'lib', include: ['*.jar'])

	compile "com.jme3:jme3-core:$jmonkeyengine_version"
	compile "com.jme3:jme3-desktop:$jmonkeyengine_version"
	compile "com.jme3:jme3-lwjgl:$jmonkeyengine_version"
	compile 'com.github.brainless-studios:tonegodgui:-SNAPSHOT'
	
	
}

eclipse.classpath.file {
	beforeMerged { classpath ->
		classpath.entries.removeAll() { c ->
			c.kind == 'src'
		}
	}

	withXml {
		def node = it.asNode()

//		node.appendNode('classpathentry kind="src" path="src"')

		node.children().removeAll() { c ->
			def path = c.attribute('path')
			path != null && (
					path.contains('/com.android.support/support-v4')
					)
		}
	}
	
}

sourceSets {
	main {
		java { srcDir 'src'}
		resources { srcDir 'assets' }
	}
	test {
		java { srcDir 'test/java' }
		resources { srcDir "test/resources" }
	}
}

test {
	// enable TestNG support (default is JUnit)
	useTestNG()

	// set a system property for the test JVM(s)
	systemProperty 'some.prop', 'value'

	// explicitly include or exclude tests
	//	include 'org/foo/**'
	//	exclude 'org/boo/**'

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}

	//	options {
	//		listeners << 'org.uncommons.reportng.HTMLReporter'
	//		listeners << 'org.uncommons.reportng.JUnitXMLReporter'
	//	}
}

//sets up the Android Eclipse project, using the old Ant based build.
eclipse {
	// need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
	// ignores any nodes added in classpath.file.withXml
//	sourceSets {
//		main { 
//			java.srcDirs "src"
//			resources.srcDirs = ["src"]
//		}
//	}
	classpath {
		downloadSources=true
	 }

	jdt {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	project {
		name = appName 
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
	archives sourcesJar
	//, javadocJar
}

repositories {
	jcenter()
}

//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			if (plugins.hasPlugin('war')) {
//				from components.web
//			} else {
//				from components.java
//				groupId 'tonegodgui'
//				artifactId 'tonegodgui'
//				version version
//			}
//
//			artifact sourcesJar
////			artifact javadocJar
//		}
//	}
//}

//publishing {
//	publications {
//		MyPublication(MavenPublication) {
//			from components.java
//			groupId 'tonegodgui'
//			artifactId 'tonegodgui'
//			version version
//		}
//	}
//}

//bintray {
//	user = bintray_user //this usually comes from gradle.properties file in ~/.gradle
//	key = bintray_api_key //this usually comes from gradle.properties file in ~/.gradle
//
////        configurations = ['deployables'] //When uploading configuration files
//	// - OR -
//	publications = ['mavenJava'] //When uploading Maven-based publication files
//	// - AND/OR -
////        filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
////            from 'arbitrary-files'
////            into 'standalone_files/level1'
////            rename '(.+)\\.(.+)', '$1-suffix.$2'
////        }
//	dryRun = false //Whether to run this as dry-run, without deploying
//	publish = true //If version should be auto published after an upload
//	pkg {
////            repo = 'myrepo'
//		repo = 'tonegodgui'
//        userOrg = 'brainless-studios' //An optional organization name when the repo belongs to one of the user's orgs
//		name = 'tonegodgui'
//		desc = 'what a fantastic package indeed!'
//		websiteUrl = 'https://github.com/bintray/bintray-examples'
//		issueTrackerUrl = 'https://github.com/bintray/bintray-examples/issues'
//		vcsUrl = 'https://github.com/bintray/bintray-examples.git'
//		licenses = ['BSD-3']
//		labels = ['example', 'gradle', 'bintray']
//		publicDownloadNumbers = true
//		attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
//		//Optional version descriptor
//		version {
//			name = project.version //Bintray logical version name
//			desc = 'optional, version-specific description'
////                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
////                vcsTag = '1.3.0'
////                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
////                gpg {
////                    sign = true //Determines whether to GPG sign the files. The default is false
////                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
////                }
//			mavenCentralSync {
//				sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
//				user = 'userToken' //OSS user token
//				password = 'paasword' //OSS user password
//				close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//			}
//		}
//	}
//}

task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}



